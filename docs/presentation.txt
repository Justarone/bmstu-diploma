2. Актуальность
*текст по слайду*
в сообществе на GitHub более распространена (23k), чем MySql-server (8k) и Postgres (10k)

3. Цели и задачи
*текст по слайду*

4. Виды защиты от неправомерного доступа
Была произведена классификация возможных видов защиты от неправомерного доступа при хранении данных и как результат было получено:
*текст по слайду*

5. Базовые понятия
*текст по слайду*

Хеш­функция - функция, осуществляющая преобразование массива входных данных произвольной длины в выходную битовую строку установленной длины, выполняемое определенным алгоритмом.
В рамках данной работы имеют значение 2 свойства хеш-функции:
1. трудоемкость нахождения входного значения по выходному;
2. трудоемкость нахождения 2 входных значений с одинаковым выходным значением (коллизии).

Криптографически стойкая хеш-функция - хеш-функция, для которой выполнение описанных операций требует обладания недостижимым на практике объемом ресурсов или потребует столько времени, что к его моменту информация утратит актуальность.

Блокчейн в рамках данной работы - выстроенная по определенным правилам непрерывная последовательная цепь блоков - элементов, содержащих информацию. Блокчейн позволяет вычислять хеш-сумму для множества блоков, в некоторых случаях более эффективно, чем с помощью плоского хеширования. Помимо этого блокчейн позволяет узнать, в каком именно месте цепи нарушена консистентность и сделать выводы о том, что какой-то блок был удален/изменен.

В общем случае такая цепь поддерживает 2 операции:
1. построение цепи (в частном случае элемент добавляется в конец и для цепи вычисляется только новое одно значение);
2. проверка целостности всей цепи.

Дерево и ориентированный ациклический граф Меркла - еще один способ получения хеш-суммы для множества блоков данных. Дерево Меркла - двоичное дерево, в листовые вершины которого помещены хеши блоков данных, а внутренние вершины содержат хеши суммы (определяется самостоятельно, не обязательно коммутативная) значений в дочерних вершинах. Ориентированный ациклический граф Меркла - структура данных, представляющая собой граф, строящийся по следующим правилам:
1. Все вершины графа, степень полуисхода которых равна 0, представляют хеши данных.
2. Вычисление значений остальных вершин графа делается в порядке, обратном топологической сортировке. Хешем очередной вершины будет значение хеша от суммы вершин, в которые есть дуга из рассматриваемой вершины.

Дерево Меркла используется в хранении транзакций в блокчейне криптовалют, при определенной конфигурации позволяет проверять целостность отдельного блока. Под такой конфигурацией подразумевается хранения вместе с каждым блоком данных доказательства Меркла - значения всех хешей, с которыми суммируется хеш проверяемого элемента на пути из листа в корень.

Граф Меркла используется в случаях наличия иерархической связи между блоками данных, например, в системе версионного контроля Git.

6. Существующие решения 1.

PASIS - распределенная система блочного хранения данных, обладающая защитой от неправомерного доступа. При записи блока он делится на n фрагментов таким образом, чтобы в дальнейшем можно было получить информацию с помощью любых m фрагментов. p в схеме означает число фрагментов, из которых можно получить какую-то часть полезной информации, m - всю информацию целиком. В случае с PASIS данные числа совпадают. Пример конфигурации PASIS 3-3-6: при такой конфигурации входящие данные делятся на 6 фрагментов, а для их дальнейшего получения и использования достаточно любых 3. При этом из менее 3 фрагментов невозможно получить какую-либо целостную часть полезной информации.

Подобные схемы могут быть реализованы с помощью полиномиальной передискретизации, которая является подклассом стирающих кодов, при котором информация представляется в виде полинома m-ой степени, а n - фрагментов представляют из себя значения полинома в определенных заранее точках.

Для проверки валидности данных предлагается следующая последовательность действий:
1. получить m фрагментов;
2. восстановить N записываемых фрагментов;
3. проверить кросс хеш-сумму - конкатенация хеш-сумм от всех фрагментов.

Данная схема не накладывает дополнительных ограничений на ее использование, то есть:
1. можно выбрать любую схему и любой способ разбиения блоков на фрагменты и восстановления фрагментов;
2. на отдельных узлах кластера может быть включена авторизация, хранилище может работать по модели совместного доступа;
3. нет явных ограничений на адресацию данных.

OceanStore - сильно похожая на PASIS система, вносящая некоторые детали:
* данные адресуются на основе содержимого: имя блока данных в системе соответсвует значению корня дерева Меркла, построенного на основе фрагментов этого блока;
* в качестве валидации используется дерево Меркла, каждый фрагмент хранит в себе доказательство Меркла и может быть отдельно проверен.

Построение иерархических связей и обновление данных возможно, однако имеет специфику: обновление - это всегда новый блок с данными из-за адресации на основе содержимого. Поэтому во многих местах данную систему называют read-only.

7. Существующие решения 2

Криптографические файловые системы - файловые системы, имеющие дополнительный слой между виртуальной файловой системой и драйвером файловой системы, который шифрует данные. Может использовать апи ОС, а может иметь свое. Являются примером системы с исключением неправомерного чтения.

Git - система контроля версий. Не является в явном виде системой с защитой от неправомерного доступа, однако содержит в себе некоторые свойства, которые позволяют обеспечить защиту. Является примером read-only системы с органицией иерархического хранения. Между всеми блоками данных, которые содержит Git есть связь - фактически они составляют ориентированный ациклический граф Меркла, поэтому при удалении случайного (или неслучайного) элемента из внутреннего хранилища Git может быть доказано неправомерное удаление (при очередной попытке получить объект он не будет найден в хранилище объектов и будет обнаружено неконсистентное состояние). Аналогично может быть доказано неправомерное изменение: так как read-only системы позволяют изменять данные исключительно через добавление нового элемента, при изменении старого объекта не сойдутся хеш-суммы и будет обнаружено неконсистентное состояние. При добавлении новых элементов на них не будут ссылаться старые.

Bitcoin - одноранговая децентрализованная денежная система. Для такой системы недопустим неправомерный доступ. Транзакции зищищены с помощью инфраструктуры открытых ключей. В рамках блока для транзакций подсчитывается хеш-сумма с помощью дерева Меркла. Блоки объединены в блокчейн с помощью своих заголовков, которые содержат некоторую метаинфомрацию (в том числе хеш-сумму транзакций), что не позволяет изменить случайный блок состояния системы, не повлияв на последующие блоки системы. Основной механизм защиты - концепция proof-of-work: выбирается целевое значение, задающее сложность добавление блока в блокчейн: чем меньше целевое значение, тем сложнее добавить блок. Узлы системы при попытке добавить блок в систему вынуждены подбирать некоторое численное значение заголовка таким образом, чтобы вкупе с другой метаинформацией заголовка хеш-сумма была меньше целевого значения. Таким образом в среднем будут добавляться те блоки, на подсчете которых сконцентировано наибольшее с точки зрения вычислительных ресурсов количество узлов - то есть состояние системы определяется по принципу большинства. Это является и минусом системы: при появлении узла, имеющего 51% мощностей системы, он будет управлять ее состоянием.

8. Существующие решения вывод.

На слайде приведена сводная таблица рассмотренных систем.
Можно выделить некоторые соответсвие свойств системы и обеспечиваемых видов защиты от неправомерного доступа:
* Защита от чтения возможна в системе, в которой определенная группа людей обладает некоторым уникальным знанием (ключ в КФС).
* Восстановление данных после частичного изменения или удаления блока возможно в распределенных системах, использующих стирающий код, в связи с тем, что фрагменты хранятся в разных местах и допускается неправомерный доступ в части мест.
* Исключает возможность полного неправомерного изменения только Bitcoin, потому что во всех рассмотренных системах количество узлов, в которых хранятся данные, конечно и задано наперед (хоть и в теории может быть очень велико), в то время как в Bitcoin все узлы системы содержат одно состояние.
* Возможностью доказательства неправомерного изменения обладают все системы кроме КФС, используя для этого контрольные суммы и хеши. Однако также как в случае удаления, в локальной системе без шифрования нарушитель может восстановить целостность цепочки блоков при изменении внутреннего состояния Git.
* Возможностью доказательства неправомерного удаления блока обладают 2 системы, в основе которых лежит блокчейн. Однако если данные не шифруются никаким образом, то в случае с Git человек, нарушающий права, способен повторить действия самой системы, и произвести изменения, поддержав целостность цепочки блоков.

9. ClickHouse

Колоночная СУБД. Колоночная опеределяет структуру хранения данных, будет рассмотрено дальше. Движок - компонент, отвечающий за хранение данных: разные движки могут по-разному структурировать данные. Описанные на слайде концепции относятся к хранению данных в движке MergeTree.

*текст со слайда*

10. ClickHouse 2

На рисунке видно описанные ранее концепции:
* партиция представляет из себя набор директорий, обладающих общим префиксом в файловой системе.
* кусок представляет из себя директорию, хранящую:
    * данные
    * значения индекса
    * файлы с засечками для значений индекса
    * другие метаданные (количество элементов, хеш-суммы и тд)
* данные могут храниться по-разному:
    * широкое хранение подразумевает хранение каждого столбца в отдельном файле, аналогично хранятся засечки
    * компактное хранение - все столбцы хранятся в одном файле, записываясь последовательно друг за другом по гранулам
* данные сжимаются (шифруются, если есть шифрование столбца) в рамках одного столбца одной гранулы (выделенные на рисунке прямоугольники - единицы компрессии данных)

11. ClickHouse 3

в штатной работе СУБД можно выделить 3 вида операций:
*текст со слайда* + про асинхронность слияний и мутаций

на картинке можно увидеть так называемое покрытие: при выполнении мутации или слияния финальным шагом выполняется переименование получившегося временного куска в активный кусок. При этом чтобы старые куски атомарно перестали быть активные, новый кусок их покрывает: за это отвечает версия. 1 версия - версия с точки зрения слияния, 2 версия - с точки зрения мутаций

12. Анализ ClickHouse

* Дополнительные возможности:
    * шифрование данных на уровне директории (декоратор над внутренним объектом диска: весь входящий поток байт шифруется, выходящий - дешифруется, реализовано через сжимающий буфер с шифрующим кодеком над файловым буфером) и столбца (с помощью кодеков в сжимающем буфере);
    * проверка целостности данных на уровне куска.
* Без шифрования не имеет защиты.
* С шифрованием:
    * исключается возможность неправомерного чтения;
    * возможность доказательства неправомерного изменения.
    * невозможность доказательства неправомерного удаления блока.

13. сам метод

сценарии: *картинка со слайда*
Ключевые моменты: *текст со слайда*
формула для расчета: *описать слайд*

14. Схемы алгоритмов

3 алгоритма:
* изменения состояния кусков
* подсчет цепочки
* валидация цепочки

15. Диаграмма классов

* имеющиеся классы - StorageMergeTree, MergeTreeData
* новые - MergeTreeDataChainer, State

16. Результаты экспериментов

*текст со слайда*

17. выводы

текст со слайда

18. дальнейшее развитие

*текст со слайда* ReplicatedMergeTree - реплицированная версия таблицы MergeTree. возможно внедрение метода защиты от частичного изменения/удаления.
